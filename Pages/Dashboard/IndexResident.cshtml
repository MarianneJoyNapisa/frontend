@page
@model HomeownersMS.Pages.Dashboard.IndexResidentModel
@{
    Layout = "_ResidentLayout";
    ViewData["HeaderTitle"] = "Dashboard";
    ViewData["Title"] = "Dashboard";
}

<!-- Add FullCalendar CSS -->
<link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css" rel="stylesheet" />

<style>
    /* General styles */
    .card {
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
        background-color: var(--bs-body-bg);
        border: 1px solid var(--bs-border-color);
    }

    .card-header {
        border-bottom: 1px solid var(--bs-border-color);
        padding: 12px 15px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: var(--bs-tertiary-bg);
    }

    .card-body {
        padding: 15px;
        background-color: var(--bs-body-bg);
    }

    /* Announcement cards */
    .ann-Card {
        border: 1px solid var(--bs-border-color);
        border-radius: 6px;
        margin-bottom: 12px;
        overflow: hidden;
        background-color: var(--bs-body-bg);
    }

    .ann-Card .header {
        padding: 8px 12px;
        display: flex;
        align-items: center;
        background-color: var(--bs-tertiary-bg);
    }

    .ann-Card .header .icon {
        width: 24px;
        height: 24px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 8px;
        color: white;
        background-color: var(--bs-primary);
    }

    .ann-Card .content {
        padding: 12px;
    }

    /* Custom button styling */
    .show-more-btn {
        background-color: transparent;
        border: 1px solid var(--bs-border-color);
        color: var(--bs-body-color);
        width: 100%;
        padding: 8px;
        border-radius: 4px;
        text-align: center;
        transition: all 0.3s;
    }

    .show-more-btn:hover {
        background-color: var(--bs-tertiary-bg);
    }

    /* Events card */
    .event-card {
        border-left: 4px solid var(--bs-primary);
        border-radius: 8px;
        padding: 12px 15px;
        margin-bottom: 12px;
        background-color: var(--bs-body-bg);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        transition: all 0.2s ease;
    }

    .event-card:hover {
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transform: translateY(-2px);
    }

    .event-date {
        font-size: 0.95rem;
        color: var(--bs-primary);
        margin-bottom: 5px;
        font-weight: bold;
    }

    .event-time {
        font-size: 0.9rem;
        margin-bottom: 8px;
        color: var(--bs-secondary-color);
        font-weight: bold;
    }

    .event-location {
        font-size: 0.9rem;
        color: var(--bs-secondary-color);
        margin-bottom: 8px;
        display: flex;
        align-items: center;
    }

    .event-location i {
        margin-right: 5px;
        color: var(--bs-primary);
    }

    .event-title {
        font-weight: 500;
        font-size: 1rem;
        color: var(--bs-body-color);
    }

    /* No events message styling */
    #events-container>p {
        text-align: center;
        color: var(--bs-secondary-color);
        padding: 10px;
    }

    /* custom */
    .super-small {
        font-size: x-small;
    }

    /* Modern FullCalendar Styles */
    #calendar thead {
        background-color: var(--bs-body-bg);
    }

    .fc {
        font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;
        --fc-border-color: var(--bs-border-color-translucent);
        --fc-today-bg-color: transparent;
        --fc-neutral-bg-color: transparent;
        --fc-highlight-color: rgba(var(--bs-primary-rgb), 0.1);
    }

    /* Header styling */
    .fc .fc-toolbar-title {
        font-size: 1.2rem;
        font-weight: 600;
        color: var(--bs-heading-color);
    }

    .fc .fc-col-header-cell {
        background-color: transparent !important;
        padding: 12px 0;
    }

    .fc .fc-col-header-cell-cushion {
        color: var(--bs-secondary-color);
        text-decoration: none !important;
        font-size: 0.75rem;
        text-transform: uppercase;
        font-weight: 500;
        letter-spacing: 0.5px;
    }

    /* Navigation buttons */
    .fc .fc-button {
        background-color: transparent !important;
        border: none !important;
        color: var(--bs-primary) !important;
        transition: all 0.2s ease;
        padding: 6px 10px;
        border-radius: 6px;
        font-size: 1rem;
    }

    .fc .fc-button:hover {
        background-color: var(--bs-primary-bg-subtle) !important;
        color: var(--bs-primary) !important;
        transform: translateY(-1px);
    }

    .fc .fc-button:active {
        transform: translateY(0);
    }

    /* Day cells */
    .fc .fc-daygrid-day-frame {
        aspect-ratio: 1/1;
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 4px;
        border-radius: 50%;
        transition: all 0.2s ease;
    }

    .fc-day-hoverable:hover .fc-daygrid-day-frame {
        background-color: rgba(var(--bs-primary-rgb), 0.1) !important;
        transform: scale(1.05);
    }

    .fc .fc-daygrid-day-number {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 4px;
        color: var(--bs-body-color);
        text-decoration: none !important;
        font-weight: 500;
        font-size: 0.9rem;
        transition: all 0.2s ease;
    }

    /* Today's date */
    .fc .fc-daygrid-day.fc-day-today .fc-daygrid-day-frame {
        background-color: var(--bs-primary) !important;
        box-shadow: 0 2px 6px rgba(var(--bs-primary-rgb), 0.3);
    }

    .fc .fc-daygrid-day.fc-day-today .fc-daygrid-day-number {
        color: white !important;
        font-weight: 600;
    }

    /* Selected date */
    .fc .fc-daygrid-day.selected .fc-daygrid-day-frame {
        background-color: var(--bs-primary) !important;
        box-shadow: 0 3px 8px rgba(var(--bs-primary-rgb), 0.4);
        transform: scale(1.05);
    }

    .fc .fc-daygrid-day.selected .fc-daygrid-day-number {
        color: white !important;
        font-weight: 600;
    }

    /* Remove borders and spacing */
    .fc .fc-scrollgrid {
        border: none !important;
    }

    .fc .fc-daygrid-body {
        border: none !important;
    }

    .fc .fc-daygrid-day {
        border: none !important;
    }

    /* Month divider */
    .fc .fc-daygrid-body-unbalanced .fc-daygrid-day-events {
        min-height: 0;
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .fc .fc-toolbar-title {
            font-size: 1rem;
        }
        
        .fc .fc-col-header-cell-cushion {
            font-size: 0.7rem;
        }
        
        .fc .fc-daygrid-day-number {
            font-size: 0.8rem;
        }
    }

    /* event dot indicator */
    .event-dot {
        width: 6px;
        height: 6px;
        background-color: var(--bs-primary);
        border-radius: 50%;
        display: inline-block;
        margin-left: 4px;
        vertical-align: middle;
    }

    .fc-daygrid-day.fc-day-today .event-dot,
    .fc-daygrid-day.selected .event-dot {
        background-color: white;
    }
</style>

<div class="row">
    <!-- Announcement Section -->
    <div class="col-lg">
        <div class="border-0 bg-transparent">
            <div class="card-header bg-transparent d-flex justify-content-between align-items-center px-0 border-0">
                <h4 class="m-0">Announcements</h4>
                <a asp-page="/Announcement/Announcement_Events" class="text-primary">View All</a>
            </div>
            <div class="card-body p-0">
                <div id="announcementCards">
                    @if (Model.LatestAnnouncements.Any())
                    {
                        var colorClasses = new[] { "bg-danger", "bg-success", "bg-primary" };
                        var colorIndex = 0;

                        @foreach (var announcement in Model.LatestAnnouncements)
                        {
                            <div class="card mb-3 border-0 shadow-sm ann-card">
                                <div
                                    class="card-header text-white @colorClasses[colorIndex] d-flex justify-content-between align-items-center">
                                    <span class="text-capitalize">@announcement.Title</span>
                                </div>
                                <div class="card-body">
                                    <p class="mb-1 fw-bold">
                                        @if (announcement.EventDate.HasValue)
                                        {
                                            <span>@announcement.EventDate.Value.ToString("MMM dd, yyyy") @@</span>
                                            @if (announcement.EventTime.HasValue)
                                            {
                                                <span> @announcement.EventTime.Value.ToString("hh:mm tt")</span>
                                            }
                                            else
                                            {
                                                <span>--:--</span>
                                            }
                                        }
                                        else
                                        {
                                            <span>n.d. @@</span>
                                        }
                                    </p>
                                    <p class="mb-1 small text-primary fw-bold">
                                        <i class="bi bi-geo-alt"></i> Blocks @announcement.BlocksAffected
                                    </p>
                                    <p class="mb-2 small text-primary">
                                        <i class="bi bi-telephone"></i> (@announcement.Office) <span
                                            class="fw-bold">@announcement.ContactNumber</span>
                                    </p>
                                    <p class="mb-0 text-muted super-small">@announcement.Content</p>
                                </div>
                            </div>

                            colorIndex = (colorIndex + 1) % colorClasses.Length;
                        }
                    }
                    else
                    {
                        <div class="text-center py-5 bg-light rounded-1 transition-all empty-container mb-3" style="transition: 0.3s; border-radius: 6px !important; font-size: small !important;">
                            <i class="fas fa-history fa-3x text-muted mb-3"></i>
                            <h6 class="text-muted">No announcements</h6>
                            <p class="text-muted">There are currently no announcements as of this moment.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Calendar and Events Section -->
    <div class="col-lg">
        <!-- Calendar Card -->
        <div class="card">
            <div class="card-body">
                <div class="d-flex flex-row justify-content-between mb-4">
                    <h5 class="m-0 fw-bold">Event Calendar</h5>
                    <button id="reset-calendar" class="btn btn-sm btn-outline-secondary">Show All</button>
                </div>
                @* Calendar shows here *@
                <div id="calendar"></div>
            </div>
        </div>

        <!-- Events -->
        <div class="card mt-4" id="events">
            <div class="card-body">
                <div class="d-flex flex-column align-items-center mb-4">
                    <h5 class="m-0 fw-bold">Events</h5>
                    <p class="text-muted small m-0">Click on a calendar date and your events will show here.</p>
                </div>
                <div id="events-container">
                    @if (Model.AllEvents.Any())
                    {
                        foreach (var evt in Model.AllEvents)
                        {
                        <div class="event-card" data-event-date="@evt.EventDate?.ToString("yyyy-MM-dd")">
                            <div class="event-date">
                                <strong>@(evt.EventDate.HasValue ? evt.EventDate?.ToString("ddd, MMM dd yyyy") : "n.d")</strong>
                            </div>
                            <div class="event-time">
                                <strong>
                                    @(evt.EventTimeStart.HasValue? evt.EventTimeStart.Value.ToString("h:mm tt") : "--:--")
                                    @(evt.EventTimeEnd.HasValue ? " - " + evt.EventTimeEnd.Value.ToString("h:mm tt") : "")
                                </strong>
                            </div>
                            <div class="event-location">
                                <i class="bi bi-geo-alt"></i> @evt.FacilityRequest?.Facility?.Name
                            </div>
                            <div class="event-title">@evt.Title</div>
                        </div>
                        }
                    }
                    else
                    {
                        <div class="text-center py-5 rounded-1 transition-all empty-container mb-3" style="transition: 0.3s; border-radius: 6px !important; font-size: small !important;">
                            <i class="fas fa-exclamation-circle fa-3x text-muted mb-3"></i>
                            <h6 class="text-muted">No events</h6>
                            <p class="text-muted">No events available for the selected date.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- FullCalendar JS -->
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function () {
    // Initialize calendar
    var calendarEl = document.getElementById('calendar');
    var calendar = new FullCalendar.Calendar(calendarEl, {
        initialView: 'dayGridMonth',
        headerToolbar: {
            left: 'prev',
            center: 'title',
            right: 'next'
        },
        height: 'auto',
        contentHeight: 'auto',
        aspectRatio: 1.5,
        dayMaxEventRows: true,
        firstDay: 1,
        dayHeaderFormat: { weekday: 'short' },
        dayHeaderContent: function(arg) {
            return arg.text.slice(0, 3);
        },
        dateClick: function(info) {
            handleDateSelection(info.dateStr, info.dayEl);
        },
        dayCellDidMount: function(info) {
            const cell = info.el.querySelector('.fc-daygrid-day-frame');
            if (cell) {
                // Get date in local timezone (not UTC)
                const date = new Date(info.date);
                const localDateStr = formatLocalDate(date); // Use helper function

                cell.setAttribute('tabindex', '0');
                cell.setAttribute('role', 'button');
                cell.setAttribute('aria-label', `Select date ${localDateStr}`);

                // Add hover class to parent day element
                info.el.classList.add('fc-day-hoverable');

                cell.addEventListener('keydown', (e) => {
                    if (e.key === 'Enter' || e.key === ' ') {
                        e.preventDefault();
                        handleDateSelection(localDateStr, info.el);
                    }
                });

                // Check if this day has events - use local date string
                fetch(`?handler=HasEvents&date=${localDateStr}`)
                    .then(response => response.json())
                    .then(hasEvents => {
                        if (hasEvents) {
                            const dot = document.createElement('div');
                            dot.className = 'event-dot';
                            const dayNumber = info.el.querySelector('.fc-daygrid-day-number');
                            if (dayNumber) {
                                dayNumber.appendChild(dot);
                            }
                        }
                    });
            }
        },
        datesSet: function() {
            @if (!Model.SelectedDate.HasValue)
            {
                <text>
                    const today = new Date();
                    const todayStr = today.toISOString().split('T')[0];
                    const todayEl = document.querySelector(`.fc-day[data-date="${todayStr}"]`);
                    if (todayEl) {
                        todayEl.classList.add('selected');
                    }
                </text>
            }
            else
            {
                <text>
                    const selectedDateStr = '@Model.SelectedDate.Value.ToString("yyyy-MM-dd")';
                    const selectedEl = document.querySelector(`.fc-day[data-date="${selectedDateStr}"]`);
                    if (selectedEl) {
                        selectedEl.classList.add('selected');
                    }
                </text>
            }
        }
    });
    calendar.render();

    // Helper function to format date as YYYY-MM-DD in local time
    function formatLocalDate(date) {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
    }

    function handleDateSelection(dateStr, dayEl) {
        document.querySelectorAll('.fc-daygrid-day.selected').forEach(el => {
            el.classList.remove('selected');
        });

        if (dayEl) {
            dayEl.classList.add('selected');
        }

        loadEventsForDate(dateStr);
    }

    function loadEventsForDate(dateStr) {
        const date = new Date(dateStr);
        const formattedDate = date.toISOString().split('T')[0];

        fetch(`?handler=FilterEvents&date=${formattedDate}`)
            .then(response => response.text())
            .then(html => {
                document.getElementById('events-container').innerHTML = html;
                addCardHoverEffects();
            })
            .catch(error => {
                console.error('Error loading events:', error);
            });
    }

    function addCardHoverEffects() {
        document.querySelectorAll('.event-card').forEach(card => {
            card.addEventListener('mouseenter', function () {
                this.style.boxShadow = '0 6px 12px rgba(0,0,0,0.12)';
                this.style.transform = 'translateY(-4px)';
            });
            card.addEventListener('mouseleave', function () {
                this.style.boxShadow = '0 2px 6px rgba(0,0,0,0.08)';
                this.style.transform = 'translateY(0)';
            });
        });
    }

    document.getElementById('reset-calendar').addEventListener('click', function () {
        document.querySelectorAll('.fc-daygrid-day.selected').forEach(el => {
            el.classList.remove('selected');
        });

        fetch('?handler=FilterEvents')
            .then(response => response.text())
            .then(html => {
                document.getElementById('events-container').innerHTML = html;
                addCardHoverEffects();
            })
            .catch(error => {
                console.error('Error resetting events:', error);
            });
    });

    function handleResize() {
        calendar.updateSize();
    }

    window.addEventListener('resize', handleResize);
    handleResize();
});
</script>