@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@using HomeownersMS.Data
@inject HomeownersContext context

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] | Blue Peak Living</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
    <!-- Add FullCalendar CSS -->
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css" rel="stylesheet">
    <link rel="stylesheet" href="~/css/GLobalstyle.css" />
    <style>
        #notificationList * {
            font-size: small !important;
        }

        #notification .dropdown-toggle::after {
            color: white;
        }
    </style>
</head>

<body>
    @Html.AntiForgeryToken()
    <!-- Header -->
    <div class="headerPage">
        <button class="sideNav_toggleBtn" id="sideNav_toggleBtn">
            <i class="bi bi-list fs-4 p-2"></i>
        </button>
        <h3 class="m-0">
            <a class="ghost-link" asp-page="/Dashboard/Index">@ViewData["HeaderTitle"]</a>
        </h3>
        @* Notification *@
        <div class="dropdown" id="notification">
            <button class="btn dropdown-toggle" type="button" id="notificationDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                <i class="bi bi-bell fs-4 p-2 text-light"></i>
                <span id="unreadCount" class="badge bg-danger d-none">0</span>
            </button>
            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="notificationDropdown" id="notificationList">
                <li><h6 class="dropdown-header">Notifications</h6></li>
                <li><a class="dropdown-item" href="#">Loading notifications...</a></li>
            </ul>
        </div>
    </div>

    @{
        var username = Context.User?.Identity?.Name ?? "Guest";
        // Get the resident's profile image and name directly from the database
        var (profileImagePath, residentName) = await Task.Run(async () => {
            var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
            if (userId != null && int.TryParse(userId, out int residentId))
            {
                var resident = await context.Residents.FirstOrDefaultAsync(r => r.UserId == residentId);
                if (resident != null)
                {
                    var name = $"{resident.FName} {resident.LName}".Trim();
                    return (resident.ProfileImage ?? "", name);
                }
            }
            return ("", "Guest");
        });
        
        var profileImageUrl = !string.IsNullOrEmpty(profileImagePath?.ToString()) 
            ? Url.Content($"~/{profileImagePath}")
            : Url.Content("~/images/default-profile.jpg");
        ViewData["CurrentPage"] = ViewContext.RouteData.Values["page"]?.ToString();
        ViewData["ProfileImageUrl"] = profileImageUrl;
        ViewBag.ProfileImageUrl = profileImageUrl;
    }

    <!-- Side Navigation -->
    <div class="sideNavBar" id="sidenavBar">
        <!-- User Profile Section -->
        <a class="ghost-link" asp-page="/Profile/ProfileResident">
            <div class="userProfile">
                <img src="@profileImageUrl" class="profile-avatar"/>
                <div class="userInfo">
                    <p class="userName">@username</p>
                    <p class="profile-name">@residentName</p>
                    <p class="userType">Resident</p>
                </div>
            </div>
        </a>

        <!-- Navigation Links -->
        <div class="mainfunc_navLinks">
            <a asp-page="/Dashboard/Index"
                class="navItem @(ViewData["CurrentPage"]?.ToString() == "/Dashboard/IndexResident" ? "active" : "")">
                <i class="bi bi-house-door-fill"></i>
                <span>Dashboard</span>
            </a>
            <a asp-page="/Announcement/Announcement_Events"
                class="navItem @(ViewData["CurrentPage"]?.ToString()?.StartsWith("/Announcement/") == true ? "active" : "")">
                <i class="bi bi-megaphone-fill"></i>
                <span>Announcements</span>
            </a>
            <a asp-page="/Reservation/Reservation"
                class="navItem @(ViewData["CurrentPage"]?.ToString()?.StartsWith("/Reservation/") == true ? "active" : "")">
                <i class="bi bi-calendar-fill"></i>
                <span>Reservation</span>
            </a>
            @* <a asp-page="/Billings_Payments/Payments"
                class="navItem @(ViewData["CurrentPage"]?.ToString() == "/Billings_Payments/Payments" ? "active" : "")">
                <i class="bi bi-credit-card-fill"></i>
                <span>Billing & Payments</span>
            </a> *@
            <a asp-page="/Service/Service"
                class="navItem @(ViewData["CurrentPage"]?.ToString()?.StartsWith("/Service") == true ? "active" : "")">
                <i class="bi bi-tools"></i>
                <span>Service</span>
            </a>
            <a asp-page="/Community/Community"
                class="navItem @(ViewData["CurrentPage"]?.ToString()?.StartsWith("/Community") == true ? "active" : "")">
                <i class="bi bi-chat-left-text-fill"></i>
                <span>Community</span>
            </a>
            <a asp-page="/Resources/Resource"
                class="navItem @(ViewData["CurrentPage"]?.ToString()?.StartsWith("/Resources") == true ? "active" : "")">
                <i class="bi bi-file-earmark-text-fill"></i>
                <span>Resources</span>
            </a>
            @* <a asp-page="/Security/Security"
                class="navItem @(ViewData["CurrentPage"]?.ToString() == "/Security/Security" ? "active" : "")">
                <i class="bi bi-shield-shaded"></i>
                <span>Security</span>
            </a> *@
        </div>

        <div class="genfunc_navLinks">
            <a asp-page="/Settings/Index"
                class="navItem @(ViewData["CurrentPage"]?.ToString()?.StartsWith("/Settings") == true ? "active" : "")">
                <i class="bi bi-gear-fill"></i>
                <span>Settings</span>
            </a>
            <a asp-page="/Account/Logout"
                class="navItem @(ViewData["CurrentPage"]?.ToString() == "/Account/Logout" ? "active" : "")">
                <i class="bi bi-box-arrow-right"></i>
                <span>Logout</span>
            </a>
        </div>
    </div>

    <div class="overlay" id="overlay"></div>

    <!-- Main Content Area -->
    <div class="dashboard container-fluid mainSection">
        @RenderBody() <!-- This is where the content of Reservation.cshtml will be rendered -->
    </div>

    <!-- Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/SideNavjs.js"></script>
    <script src="~/js/Calendar.js"></script>

    @await RenderSectionAsync("Scripts", required: false)
</body>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Load appearance settings
        const settings = JSON.parse(localStorage.getItem('appearanceSettings')) || {};
        const html = document.documentElement;
        
        // Apply dark mode
        if (settings.darkMode) {
            html.setAttribute('data-bs-theme', 'dark');
        }
        
        // Apply primary color
        if (settings.primaryColor) {
            html.classList.add(`theme-${settings.primaryColor}`);
        } else {
            html.classList.add('theme-blue'); // Default
        }
        
        // Apply layout density
        if (settings.layoutDensity) {
            html.classList.add(`density-${settings.layoutDensity}`);
        } else {
            html.classList.add('density-comfortable'); // Default
        }

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/notificationHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        connection.start().then(function () {
            console.log("SignalR Connected");
            // Join the user's notification group
            connection.invoke("JoinNotificationGroup", "@User.FindFirstValue(ClaimTypes.NameIdentifier)");
        }).catch(function (err) {
            return console.error(err.toString());
        });

        // Handle received notifications
        connection.on("ReceiveNotification", function (notification) {
            updateUnreadCount();
            addNotificationToDropdown(notification);
            showToast(notification);
        });

        // Load initial notifications and count
        updateUnreadCount();
        loadNotifications();

        // Mark as read when clicked
        document.getElementById('notificationList').addEventListener('click', function(e) {
            let target = e.target;
            // Find the closest dropdown-item in case clicking on child elements
            while (target && !target.classList.contains('dropdown-item')) {
                target = target.parentElement;
                if (!target) return;
            }
            
            const notificationId = target.dataset.notificationId;
            if (notificationId) {
                // Add visual feedback immediately
                target.classList.remove('fw-bold');
                
                // Send the mark-as-read request
                fetch(`/Notification/MarkAsRead?id=${notificationId}`, { 
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                })
                .then(response => {
                    if (!response.ok) throw new Error('Failed to mark as read');
                    updateUnreadCount();
                })
                .catch(error => {
                    console.error('Error:', error);
                    // Revert visual feedback if failed
                    target.classList.add('fw-bold');
                });
            }
        });
    });

    function updateUnreadCount() {
        fetch('/Notification/GetUnreadCount')
            .then(response => response.json())
            .then(count => {
                const badge = document.getElementById('unreadCount');
                if (count > 0) {
                    badge.textContent = count;
                    badge.classList.remove('d-none');
                } else {
                    badge.classList.add('d-none');
                }
            });
    }

    function loadNotifications() {
        fetch('/Notification/GetRecentNotifications')
            .then(response => response.json())
            .then(notifications => {
                const list = document.getElementById('notificationList');
                list.innerHTML = '<li><h6 class="dropdown-header">Notifications</h6></li>';
                
                if (notifications.length === 0) {
                    list.innerHTML += '<li><a class="dropdown-item" href="#">No notifications</a></li>';
                    return;
                }
                
                notifications.forEach(notification => {
                    const item = document.createElement('li');
                    const link = document.createElement('a');
                    link.className = `dropdown-item ${notification.isRead ? '' : 'fw-bold'}`;
                    link.href = notification.url || '#'; // Use the URL from server
                    link.dataset.notificationId = notification.notificationId;
                    
                    const timeAgo = timeSince(new Date(notification.createdAt));
                    link.innerHTML = `
                        <div class="d-flex justify-content-between">
                            <span>${notification.title}</span>
                            <small class="text-muted">${timeAgo}</small>
                        </div>
                        <small class="text-muted">${notification.message.substring(0, 50)}${notification.message.length > 50 ? '...' : ''}</small>
                    `;
                    
                    item.appendChild(link);
                    list.appendChild(item);
                });
                
                list.innerHTML += '<li><hr class="dropdown-divider"></li>';
                list.innerHTML += '<li><a class="dropdown-item text-center" href="/Notification/Notifications">View all</a></li>';
            });
    }

    function addNotificationToDropdown(notification) {
        const list = document.getElementById('notificationList');
        const header = list.querySelector('h6.dropdown-header');
        const noItems = list.querySelector('.dropdown-item[href="#"]');
        
        if (noItems && noItems.textContent === 'No notifications') {
            list.removeChild(noItems.parentElement);
        }
        
        const item = document.createElement('li');
        const link = document.createElement('a');
        link.className = 'dropdown-item fw-bold';
        link.href = '#';
        link.dataset.notificationId = notification.notificationId;
        
        const timeAgo = timeSince(new Date(notification.createdAt));
        link.innerHTML = `
            <div class="d-flex justify-content-between">
                <span>${notification.title}</span>
                <small class="text-muted">${timeAgo}</small>
            </div>
            <small class="text-muted">${notification.message.substring(0, 50)}${notification.message.length > 50 ? '...' : ''}</small>
        `;
        
        item.appendChild(link);
        list.insertBefore(item, header.nextSibling);
    }

    function markAsRead(notificationId) {
        fetch(`/Notification/MarkAsRead?id=${notificationId}`, { method: 'POST' })
            .then(() => {
                updateUnreadCount();
                loadNotifications();
            });
    }

    function showToast(notification) {
        // Implement toast notification if desired
        console.log('New notification:', notification);
    }

    function timeSince(date) {
        const seconds = Math.floor((new Date() - date) / 1000);
        let interval = Math.floor(seconds / 31536000);
        
        if (interval >= 1) return interval + "y ago";
        interval = Math.floor(seconds / 2592000);
        if (interval >= 1) return interval + "mo ago";
        interval = Math.floor(seconds / 86400);
        if (interval >= 1) return interval + "d ago";
        interval = Math.floor(seconds / 3600);
        if (interval >= 1) return interval + "h ago";
        interval = Math.floor(seconds / 60);
        if (interval >= 1) return interval + "m ago";
        return Math.floor(seconds) + "s ago";
    }
</script>

</html>