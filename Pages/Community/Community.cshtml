@page
@model HomeownersMS.Pages.Community.CommunityModel
@using Microsoft.AspNetCore.Authorization
@using HomeownersMS.Data
@using HomeownersMS.Models
@using Microsoft.AspNetCore.Identity
@{
    // Dynamic Layout Selection
    if (User.IsInRole("admin"))
    {
        Layout = "_AdminLayout";
    }
    else if (User.IsInRole("staff"))
    {
        Layout = "_StaffLayout";
    }
    else if (User.IsInRole("resident"))
    {
        Layout = "_ResidentLayout";
    }
    else
    {
        Layout = "_Layout"; // Fallback layout
    }

    ViewData["HeaderTitle"] = "Community";
    ViewData["Title"] = "Community";
    var username = HttpContext?.User?.Identity?.Name ?? "Guest";
    ViewData["Username"] = username;
}

@functions {
    private string GetProfileImageUrl(User user)
    {
        // Default profile image path
        string defaultProfileImage = "/images/default-profile.jpg";

        // Check if the user is null
        if (user == null)
        {
            return defaultProfileImage;
        }

        // Determine the user's role and fetch the ProfileImage accordingly
        if (User.IsInRole("resident") && user.Resident?.ProfileImage != null)
        {
            return $"/{user.Resident.ProfileImage}";
        }
        else if (User.IsInRole("admin") && user.Admin?.ProfileImage != null)
        {
            return $"/{user.Admin.ProfileImage}";
        }
        else if (User.IsInRole("staff") && user.Staff?.ProfileImage != null)
        {
            return $"/{user.Staff.ProfileImage}";
        }

        // Fallback to the default profile image
        return defaultProfileImage;
    }
}
<head>
    <link rel="stylesheet" href="~/css/_community.css">
</head>

<div class="community-wrapper">
    <div class="community-main">
        <div class="community-container">
            <div class="row">
                <div class="d-flex justify-content-between align-items-center mb-3 gap-2">
                    <div class="input-group">
                        <input type="text" class="form-control border-end-0" placeholder="Search..." aria-label="Search">
                        <button class="btn btn-input-icon" type="button"><i class="bi bi-search"></i></button>
                    </div>  
                    <div class="d-flex align-items-center">
                        <button class="btn btn-sm btn-primary me-1"><i class="bi bi-filter"></i></button>
                        <button class="btn btn-sm btn-secondary"><i class="bi bi-sort-down"></i></button>
                    </div>
                </div>
            </div>

            <!-- Add a New Thread Button -->
            @if (User.Identity.IsAuthenticated)
            {
                <div class="new-thread mb-3" id="new-thread-button">
                    <p>Write a New Thread</p>
                    <button class="btn btn-primary"><i class="bi bi-pencil-fill"></i></button>
                </div>

                @* <!-- New Thread Form (Initially Hidden) --> *@
                <div class="new-thread-form" id="new-thread-form">
                    <form method="post">
                        <div class="form-group">
                            <input type="text" class="form-control" name="Title" placeholder="Thread Title" required>
                        </div>
                        <div class="form-group">
                            <textarea class="form-control" name="Content" placeholder="Write content here..." required></textarea>
                        </div>
                        <div class="form-group">
                            <select name="Type" class="form-select" required>
                                <option value="">Select a category</option>
                                <option value="@CommunityPost.Types.concern">Concern</option>
                                <option value="@CommunityPost.Types.suggestion">Suggestion</option>
                                <option value="@CommunityPost.Types.general">General</option>
                                <option value="@CommunityPost.Types.advice">Advice</option>
                            </select>
                        </div>
                        <div class="d-flex gap-2 justify-content-end">
                            <button type="button" class="btn btn-secondary" id="cancel-thread">Cancel</button>
                            <button type="submit" class="btn btn-primary">Post Thread</button>
                        </div>
                    </form>
                </div>
            }

            @if (Model.Posts != null && Model.Posts.Any())
            {
                foreach (var post in Model.Posts)
                {
                    <div class="post-card">
                        <div class="post-header align-items-center">
                            <div class="user-info">
                                <img src="@GetProfileImageUrl(post.User)"
                                    alt="User Avatar" width="40" height="40"
                                    class="profile-avatar"
                                    style="border: 1px solid var(--placeholder-text-color);">
                                <div class="user-details">
                                    <div class="post-author">@post.User?.Username</div>
                                    <div class="d-flex align-items-center gap-1 ms-2">
                                        @if (post.Type.HasValue)
                                        {
                                            <span class="badge badge-@post.Type.ToString().ToLower()">@post.Type</span>
                                        }
                                        @if (post.User != null)
                                        {
                                            <span class="badge badge-role">@post.User.Privilege.ToString()</span>
                                        }
                                    </div>
                                </div>
                            </div>
                            <div class="d-flex align-items-start ">
                                <small class="text-muted ms-2">@post.CreatedAt.ToString("g")</small>
                                @if (User.Identity.IsAuthenticated && post.CreatedBy ==
                                    int.Parse(User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value))
                                {
                                    <div class="dropdown ms-2">
                                        <button class="btn btn-sm border-0" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                            <i class="bi bi-three-dots-vertical"></i>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-end">
                                            <li>
                                                <button class="dropdown-item edit-post-btn"
                                                        data-post-id="@post.CommunityPostId"
                                                        data-original-title="@post.Title"
                                                        data-original-content="@post.Content"
                                                        data-original-type="@post.Type">
                                                    Edit
                                                </button>
                                            </li>
                                            <li>
                                                <button class="dropdown-item delete-post-btn"
                                                        data-post-id="@post.CommunityPostId">
                                                    Delete
                                                </button>
                                            </li>
                                        </ul>
                                    </div>
                                }
                            </div>
                        </div>
                        <h4>@post.Title</h4>
                        <div class="post-content">
                            @if (post.Content.Length > 150)
                            {
                                @post.Content.Substring(0, 150)
                                <span id="dots-@post.CommunityPostId">...</span>
                                <span id="more-@post.CommunityPostId" style="display:none">@post.Content.Substring(150)</span>
                                <a href="javascript:void(0)" class="read-more"
                                    onclick="toggleReadMore('@post.CommunityPostId')">Read More</a>
                            }
                            else
                            {
                                @post.Content
                            }
                        </div>
                        <div class="post-icons">
                            <div class="reaction-icons">
                                <span class="vote-buttons">
                                    @{
                                        var userId = User.Identity.IsAuthenticated ?
                                        int.Parse(User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value) : 0;
                                        var userVote = post.Votes.FirstOrDefault(v => v.UserId == userId)?.IsUpvote;
                                    }
                                    <button type="button" class="btn-vote upvote-btn @(userVote == true ? "active" : "")"
                                        data-post-id="@post.CommunityPostId" data-is-upvote="true">
                                        <i class="fas fa-arrow-up"></i>
                                    </button>
                                    <span class="net-votes" data-post-id="@post.CommunityPostId">@(post.Votes.Count(v =>
                                                                v.IsUpvote == true) - post.Votes.Count(v => v.IsUpvote == false))</span>
                                    <button type="button" class="btn-vote downvote-btn @(userVote == false ? "active" : "")"
                                        data-post-id="@post.CommunityPostId" data-is-upvote="false">
                                        <i class="fas fa-arrow-down"></i>
                                    </button>
                                </span>
                          </div>
                            @* <div class="post-meta">
                                <span class="badge badge-primary">@(post.Comments?.Count ?? 0) comments</span>
                                <span class="badge badge-secondary">@post.CreatedAt.ToString("g")</span>
                            </div> *@
                        </div>

                        @* <!-- Comments Section --> *@
                        <div class="comments-section mt-3">
                            <div class="comment-count mb-2">
                                <span>💬 @(post.Comments?.Count ?? 0) comments</span>
                            </div>

                            @* <!-- Comments list (initially hidden) --> *@
                            <div class="comments-list collapse" id="comments-@post.CommunityPostId">
                                @foreach (var comment in post.Comments ?? new List<CommunityComment>())
                                {
                                    <div class="comment-card mb-2 p-2 rounded">
                                        <div class="d-flex justify-content-between">
                                            <div class="d-flex align-items-center">
                                                <div class="user-avatar" style="width: 30px; height: 30px;">
                                                    <img src="@GetProfileImageUrl(comment.User)"
                                                        alt="User Avatar" width="30" height="30">
                                                </div>
                                                <strong class="ms-2">@comment.User?.Username</strong>
                                            </div>
                                            <small class="text-muted">@comment.CreatedAt.ToString("g")</small>
                                        </div>
                                        <p class="mb-0 mt-2">@comment.Content</p>
                                        @if (User.Identity.IsAuthenticated && comment.UserId ==
                                            int.Parse(User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value))
                                        {
                                            <div class="comment-actions">
                                                <button class="btn btn-sm btn-outline-primary edit-comment-btn"
                                                    data-comment-id="@comment.CommunityCommentId"
                                                    data-original-content="@comment.Content">
                                                    Edit
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger delete-comment-btn"
                                                    data-comment-id="@comment.CommunityCommentId">
                                                    Delete
                                                </button>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>

                            @* <!-- Comment form (only show if user is authenticated) --> *@
                            @if (User.Identity.IsAuthenticated)
                            {
                                <form method="post" asp-page-handler="AddComment" class="mt-2">
                                    <input type="hidden" name="postId" value="@post.CommunityPostId">
                                    <div class="input-group"
                                        style="border-radius: 8px; overflow: hidden; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
                                        <textarea name="commentContent" class="form-control" placeholder="Add a comment..." required
                                            style="padding: 8px 12px; resize: none; height: 20px; border: 1px solid #ced4da; border-right: none;"></textarea>
                                        <button type="submit" class="btn btn-primary"
                                            style="border-radius: 0 4px 4px 0;">Post</button>
                                    </div>
                                </form>
                            }

                            @* <!-- Toggle comments button --> *@
                            <button class="btn btn-sm btn-link mt-1" type="button" data-bs-toggle="collapse"
                                data-bs-target="#comments-@post.CommunityPostId" aria-expanded="false"
                                aria-controls="comments-@post.CommunityPostId">
                                Show comments
                            </button>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="post-card text-center py-4">
                    <p>No posts yet. Be the first to post!</p>
                </div>
            }
            <a href="#" class="see-more">See More</a>
        </div> <!-- Closing community-container -->
    </div> <!-- Closing community-main -->

</div> <!-- Closing community-wrapper -->
</div>

<!-- Add edit modal -->
<div class="modal fade" id="editModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form method="post" id="editForm">
                <div class="modal-body">
                    <input type="hidden" id="editId" name="id" />
                    <input type="hidden" id="editType" name="type" value="post" />

                    <div class="form-group post-edit-fields">
                        <label>Title</label>
                        <input type="text" class="form-control" name="title" id="editTitle">
                    </div>

                    <div class="form-group">
                        <label>Content</label>
                        <textarea class="form-control" name="content" id="editContent" rows="5"></textarea>
                    </div>

                    <div class="form-group post-edit-fields">
                        <label>Type</label>
                        <select class="form-control" name="postType" id="editPostType" disabled>
                            <option value="@CommunityPost.Types.concern">Concern</option>
                            <option value="@CommunityPost.Types.suggestion">Suggestion</option>
                            <option value="@CommunityPost.Types.general">General</option>
                            <option value="@CommunityPost.Types.advice">Advice</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Add confirmation modal -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            @* // Toggle new thread form *@
                $("#new-thread-button").click(function () {
                    $("#new-thread-form").addClass("thread-form-active");
                    $(this).hide();
                });

            $("#cancel-thread").click(function () {
                $("#new-thread-form").removeClass("thread-form-active");
                $("#new-thread-button").show();
            });

            // Handle post editing
            $('.edit-post-btn').click(function () {
                const postId = $(this).data('post-id');
                const title = $(this).data('original-title');
                const content = $(this).data('original-content');
                const type = $(this).data('original-type');

                $('#editId').val(postId);
                $('#editType').val('post');
                $('#editTitle').val(title);
                $('#editContent').val(content);
                $('#editPostType').val(type);
                $('.post-edit-fields').show();

                $('#editModal').modal('show');
            });

            // Handle comment editing
            $('.edit-comment-btn').click(function () {
                const commentId = $(this).data('comment-id');
                const content = $(this).data('original-content');

                $('#editId').val(commentId);
                $('#editType').val('comment');
                $('#editContent').val(content);
                $('.post-edit-fields').hide();

                $('#editModal').modal('show');
            });

            // Form submission
            $('#editForm').submit(function (e) {
                e.preventDefault();

                const formData = {
                    id: $('#editId').val(),
                    type: $('#editType').val(),
                    content: $('#editContent').val()
                };

                if (formData.type === 'post') {
                    formData.title = $('#editTitle').val();
                    formData.postType = $('#editPostType').val();
                }

                $.ajax({
                    url: window.location.pathname + '?handler=Edit',
                    type: 'POST',
                    data: formData,
                    headers: {
                        "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function () {
                        location.reload();
                    },
                    error: function () {
                        alert('Error updating content');
                    }
                });
            });

            // Delete functionality
            let itemToDelete = null;
            let deleteType = null;
            const deleteModal = new bootstrap.Modal(document.getElementById('deleteConfirmationModal'));

            // Handle post deletion
            $('.delete-post-btn').click(function () {
                itemToDelete = $(this).data('post-id');
                deleteType = 'post';
                deleteModal.show();
            });

            // Handle comment deletion
            $('.delete-comment-btn').click(function () {
                itemToDelete = $(this).data('comment-id');
                deleteType = 'comment';
                deleteModal.show();
            });

            // Confirm deletion
            $('#confirmDeleteBtn').click(function () {
                $.ajax({
                    url: window.location.pathname + '?handler=Delete',
                    type: 'POST',
                    data: {
                        id: itemToDelete,
                        type: deleteType,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function () {
                        deleteModal.hide();
                        location.reload();
                    },
                    error: function () {
                        alert('Error deleting item');
                    }
                });
            });

            // Voting functionality
            $(document).on('click', '.btn-vote', function () {
                const postId = $(this).data('post-id');
                const isUpvote = $(this).data('is-upvote');
                const $button = $(this);
                const $oppositeButton = isUpvote ?
                    $(`.downvote-btn[data-post-id="${postId}"]`) :
                    $(`.upvote-btn[data-post-id="${postId}"]`);

                // If already active, this is an unvote
                const isActive = $button.hasClass('active');
                const voteValue = isActive ? null : isUpvote;

                $.ajax({
                    url: window.location.pathname + '?handler=Vote',
                    type: 'POST',
                    data: {
                        postId: postId,
                        isUpvote: voteValue,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        // Update counts
                        $(`.upvote-btn[data-post-id="${postId}"] .upvote-count`).text(response.upvotes);
                        $(`.downvote-btn[data-post-id="${postId}"] .downvote-count`).text(response.downvotes);

                        // Update net votes - add this line
                        $(`.net-votes[data-post-id="${postId}"]`).text(response.upvotes - response.downvotes);

                        // Update active states
                        $button.toggleClass('active', response.userVote === isUpvote);
                        $oppositeButton.removeClass('active');
                    },
                    error: function () {
                        alert('Error processing your vote');
                    }
                });
            });
        });

        // Read more functionality
        function toggleReadMore(postId) {
            const dotsElement = document.getElementById(`dots-${postId}`);
            const moreTextElement = document.getElementById(`more-${postId}`);
            const linkElement = document.querySelector(`a[onclick="toggleReadMore('${postId}')"]`);

            if (dotsElement.style.display === "none") {
                dotsElement.style.display = "inline";
                linkElement.innerHTML = "Read More";
                moreTextElement.style.display = "none";
            } else {
                dotsElement.style.display = "none";
                linkElement.innerHTML = "Read Less";
                moreTextElement.style.display = "inline";
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            // Select all vote buttons
            const voteButtons = document.querySelectorAll('.vote-btn');

            // Add click event listeners to each button
            voteButtons.forEach(button => {
                button.addEventListener('click', function () {
                    // If the same button is clicked again, toggle its active state
                    if (this.classList.contains('active')) {
                        this.classList.remove('active');
                    } else {
                        // If it's an upvote, remove active from downvote and vice versa
                        if (this.classList.contains('upvote')) {
                            document.querySelector('.downvote').classList.remove('active');
                        } else {
                            document.querySelector('.upvote').classList.remove('active');
                        }

                        // Add active class to the clicked button
                        this.classList.add('active');
                    }
                });
            });
        });
    </script>
}