@page
@model HomeownersMS.Pages.Community.CommunityModel
@using Microsoft.AspNetCore.Authorization
@using HomeownersMS.Data
@using HomeownersMS.Models
@using Microsoft.AspNetCore.Identity
@{
    // Dynamic Layout Selection
    if (User.IsInRole("admin"))
    {
        Layout = "_AdminLayout";
    }
    else if (User.IsInRole("staff"))
    {
        Layout = "_StaffLayout";
    }
    else if (User.IsInRole("resident"))
    {
        Layout = "_ResidentLayout";
    }
    else
    {
        Layout = "_Layout"; // Fallback layout
    }

    ViewData["HeaderTitle"] = "Community";
    ViewData["Title"] = "Community";
    var username = HttpContext?.User?.Identity?.Name ?? "Guest";
    ViewData["Username"] = username;
}

<style>
    .card {
        backface-visibility: hidden;
        -webkit-backface-visibility: hidden;
        perspective: 1000px;
        -webkit-perspective: 1000px;
        transform-style: preserve-3d;
    }
    /* Search and Sort Styles */
    .input-group .btn-input-icon {
        background-color: var(--bs-primary);
        color: white;
        border-color: var(--bs-primary);
    }

    .input-group .btn-input-icon:hover {
        background-color: var(--bs-primary-dark);
        border-color: var(--bs-primary-dark);
    }

    .dropdown-item.active {
        background-color: var(--bs-primary);
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .col-md-8, .col-md-4 {
            width: 100%;
        }
        
        .col-md-4 {
            margin-top: 10px;
            justify-content: flex-start !important;
        }
    }
</style>

@functions {
    private string GetProfileImageUrl(User user)
    {
        string defaultProfileImage = "/images/default-profile.jpg";
        if (user == null) return defaultProfileImage;

        if (User.IsInRole("resident") && user.Resident?.ProfileImage != null)
        {
            return $"/{user.Resident.ProfileImage}";
        }
        else if (User.IsInRole("admin") && user.Admin?.ProfileImage != null)
        {
            return $"/{user.Admin.ProfileImage}";
        }
        else if (User.IsInRole("staff") && user.Staff?.ProfileImage != null)
        {
            return $"/{user.Staff.ProfileImage}";
        }

        return defaultProfileImage;
    }
}

<div class="container-fluid px-4 py-4">
    <div class="card shadow-sm rounded-3">
        <div class="card-body">
            <div class="row mb-3">
                <!-- Search Bar -->
                <div class="col-md-8">
                    <form method="get" class="input-group">
                        <input type="text" 
                            class="form-control border-end-0" 
                            name="searchTerm" 
                            placeholder="Search posts..." 
                            aria-label="Search"
                            value="@Request.Query["searchTerm"]">
                        @if (!string.IsNullOrEmpty(Request.Query["searchTerm"]))
                        {
                            <a href="?sortBy=@Request.Query["sortBy"]" class="btn btn-outline-secondary">
                                <i class="bi bi-x-lg"></i> Clear
                            </a>
                        }
                        <button class="btn btn-input-icon" type="submit">
                            <i class="bi bi-search"></i>
                        </button>
                    </form>
                </div>

                <!-- Filter and Sort Buttons -->
                <div class="col-md-4 d-flex align-items-center justify-content-end">
                    <div class="dropdown">
                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" 
                                type="button" 
                                id="sortDropdown" 
                                data-bs-toggle="dropdown" 
                                aria-expanded="false">
                            <i class="bi bi-sort-down me-1"></i>
                            Sort
                        </button>
                        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="sortDropdown">
                            <li>
                                <a class="dropdown-item @(Request.Query["sortBy"] == "newest" || string.IsNullOrEmpty(Request.Query["sortBy"]) ? "active" : "")" 
                                href="?searchTerm=@Request.Query["searchTerm"]&sortBy=newest">
                                    Newest First
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item @(Request.Query["sortBy"] == "oldest" ? "active" : "")" 
                                href="?searchTerm=@Request.Query["searchTerm"]&sortBy=oldest">
                                    Oldest First
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item @(Request.Query["sortBy"] == "most-commented" ? "active" : "")" 
                                href="?searchTerm=@Request.Query["searchTerm"]&sortBy=most-commented">
                                    Most Comments
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item @(Request.Query["sortBy"] == "most-voted" ? "active" : "")" 
                                href="?searchTerm=@Request.Query["searchTerm"]&sortBy=most-voted">
                                    Most Votes
                                </a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>

            <!-- New Post Button -->
            @if (User.Identity.IsAuthenticated)
            {
                <div class="d-flex justify-content-start mb-4 gap-2">
                    <button class="btn btn-primary" id="new-thread-button">
                        <i class="bi bi-plus-lg me-2"></i> New Post
                    </button>
                </div>

                @* <!-- New Post Form --> *@
                <div class="card mb-4 d-none" id="new-thread-form">
                    <div class="card-body">
                        <form method="post">
                            <div class="mb-3">
                                <input type="text" class="form-control" name="Title" placeholder="Post Title" required>
                            </div>
                            <div class="mb-3">
                                <textarea class="form-control" name="Content" placeholder="Write your post here..." rows="4" required></textarea>
                            </div>
                            <div class="mb-3">
                                <select name="Type" class="form-select" required>
                                    <option value="">Select Category</option>
                                    <option value="@CommunityPost.Types.concern">Concern</option>
                                    <option value="@CommunityPost.Types.suggestion">Suggestion</option>
                                    <option value="@CommunityPost.Types.general">General</option>
                                    <option value="@CommunityPost.Types.advice">Advice</option>
                                </select>
                            </div>
                            <div class="d-flex justify-content-end gap-2">
                                <button type="button" class="btn btn-secondary" id="cancel-thread">Cancel</button>
                                <button type="submit" class="btn btn-primary">Post</button>
                            </div>
                        </form>
                    </div>
                </div>
            }

            @if (!string.IsNullOrEmpty(Request.Query["searchTerm"]))
            {
                <div class="alert alert-info mb-3">
                    Showing results for: <strong>@Request.Query["searchTerm"]</strong>
                    <a href="?sortBy=@Request.Query["sortBy"]" class="ghost-link btn btn-info">Clear search</a>
                </div>
            }

            <!-- Posts List -->
            @if (Model.Posts != null && Model.Posts.Any())
            {
                foreach (var post in Model.Posts)
                {
                    <div class="card mb-4 post-card" id="community-post-id-@post.CommunityPostId">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <div class="d-flex align-items-center me-1">
                                <img src="@GetProfileImageUrl(post.User)" 
                                     alt="User Avatar" 
                                     class="rounded-circle me-2" 
                                     width="40" height="40">
                                <div>
                                    <div class="fw-bold">@post.User?.Username</div>
                                    <div class="d-flex gap-2">
                                        @if (post.Type.HasValue)
                                        {
                                            <span class="badge">@post.Type</span>
                                        }
                                        @if (post.User != null)
                                        {
                                            <span class="badge" style="  background-color: var(--bs-secondary-bg-subtle);   color: var(--bs-secondary);">@post.User.Privilege.ToString()</span>
                                        }
                                    </div>
                                </div>
                            </div>
                            <div class="d-flex align-items-center">
                                <small class="text-muted me-2 d-none d-sm-block">@post.CreatedAt.ToString("g")</small>
                                @if (User.Identity.IsAuthenticated && post.CreatedBy == int.Parse(User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value))
                                {
                                    <div class="dropdown">
                                        <button class="btn btn-sm" type="button" data-bs-toggle="dropdown">
                                            <i class="bi bi-three-dots-vertical"></i>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-end">
                                            <li>
                                                <button class="dropdown-item edit-post-btn"
                                                        data-post-id="@post.CommunityPostId"
                                                        data-original-title="@post.Title"
                                                        data-original-content="@post.Content"
                                                        data-original-type="@post.Type">
                                                    Edit
                                                </button>
                                            </li>
                                            <li>
                                                <button class="dropdown-item delete-post-btn"
                                                        data-post-id="@post.CommunityPostId">
                                                    Delete
                                                </button>
                                            </li>
                                        </ul>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="card-body">
                            <h5 class="card-title">@post.Title</h5>
                            <div class="card-text mb-3">
                                @if (post.Content.Length > 150)
                                {
                                    @post.Content.Substring(0, 150)
                                    <span id="dots-@post.CommunityPostId">...</span>
                                    <span id="more-@post.CommunityPostId" style="display:none">@post.Content.Substring(150)</span>
                                    <a href="javascript:void(0)" class="read-more"
                                       onclick="toggleReadMore('@post.CommunityPostId')">Read More</a>
                                }
                                else
                                {
                                    @post.Content
                                }
                            </div>
                            
                            @* <!-- Voting --> *@
                            @{
                                var userId = User.Identity.IsAuthenticated ?
                                int.Parse(User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value) : 0;
                                var userVote = post.Votes.FirstOrDefault(v => v.UserId == userId)?.IsUpvote;
                            }
                            <div class="d-flex align-items-center mb-3">
                                @* <!-- Upvote Button --> *@
                                <button type="button" 
                                        class="btn btn-sm btn-outline-secondary btn-vote me-2 upvote-btn @(userVote == true ? "text-primary" : "")"
                                        data-post-id="@post.CommunityPostId">
                                    <i class="fas fa-thumbs-up"></i>
                                    <span class="upvotes-count" style="display:none">@post.Votes.Count(v => v.IsUpvote == true)</span>
                                </button>
                                
                                @* <!-- Net Votes Count --> *@
                                <span class="me-2 net-votes fw-bold" data-post-id="@post.CommunityPostId">
                                    @(post.Votes.Count(v => v.IsUpvote == true) - post.Votes.Count(v => v.IsUpvote == false))
                                </span>
                                
                                @* <!-- Downvote Button --> *@
                                <button type="button" 
                                        class="btn btn-sm btn-outline-secondary btn-vote downvote-btn @(userVote == false ? "text-secondary" : "")"
                                        data-post-id="@post.CommunityPostId">
                                    <i class="fas fa-thumbs-down"></i>
                                    <span class="downvotes-count" style="display:none">@post.Votes.Count(v => v.IsUpvote == false)</span>
                                </button>
                            </div>
                           

                            @* <!-- Comments Section --> *@
                            <div class="border-top pt-3">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <h6 class="mb-0">
                                        <i class="bi bi-chat-left-text me-1"></i> 
                                        @(post.Comments?.Count ?? 0) comments
                                    </h6>
                                    <button class="btn btn-sm btn-link" 
                                            type="button" 
                                            data-bs-toggle="collapse" 
                                            data-bs-target="#comments-@post.CommunityPostId">
                                        Show comments
                                    </button>
                                </div>
                                
                                <div class="collapse" id="comments-@post.CommunityPostId">
                                    @* <!-- Existing Comments --> *@
                                    @foreach (var comment in post.Comments ?? new List<CommunityComment>())
                                    {
                                        <div class="card mb-2">
                                            <div class="card-body p-3">
                                                <div class="d-flex justify-content-between mb-2">
                                                    <div class="d-flex align-items-center">
                                                        <img src="@GetProfileImageUrl(comment.User)"
                                                             alt="User Avatar"
                                                             class="rounded-circle me-2"
                                                             width="30" height="30">
                                                        <strong>@comment.User?.Username</strong>
                                                    </div>
                                                    <small class="text-muted d-none d-sm-block">@comment.CreatedAt.ToString("g")</small>
                                                </div>
                                                <p class="mb-0">@comment.Content</p>
                                                @if (User.Identity.IsAuthenticated && comment.UserId == int.Parse(User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value))
                                                {
                                                    <div class="d-flex justify-content-end gap-2 mt-2">
                                                        <button class="btn btn-sm btn-outline-primary edit-comment-btn"
                                                                data-comment-id="@comment.CommunityCommentId"
                                                                data-original-content="@comment.Content">
                                                            Edit
                                                        </button>
                                                        <button class="btn btn-sm btn-outline-danger delete-comment-btn"
                                                                data-comment-id="@comment.CommunityCommentId">
                                                            Delete
                                                        </button>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    }
                                    
                                    @* <!-- Add Comment Form --> *@
                                    @if (User.Identity.IsAuthenticated)
                                    {
                                        <form method="post" asp-page-handler="AddComment" class="mt-3">
                                            <input type="hidden" name="postId" value="@post.CommunityPostId">
                                            <div class="input-group">
                                                <textarea name="commentContent" class="form-control" placeholder="Add a comment..." required></textarea>
                                                <button type="submit" class="btn btn-primary">
                                                    <i class="bi bi-send"></i>
                                                </button>
                                            </div>
                                        </form>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="text-center py-5">
                    <i class="bi bi-chat-square-text display-4 text-muted mb-3"></i>
                    <h5>No posts yet</h5>
                    <p class="text-muted">Be the first to share something with the community</p>
                    @if (User.Identity.IsAuthenticated)
                    {
                        <button class="btn btn-primary mt-2" id="empty-new-thread-button">
                            <i class="bi bi-plus-lg me-2"></i> Create Post
                        </button>
                    }
                </div>
            }
        
        </div>
    </div>
</div>

<!-- Add edit modal -->
<div class="modal fade" id="editModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form method="post" id="editForm">
                <div class="modal-body">
                    <input type="hidden" id="editId" name="id" />
                    <input type="hidden" id="editType" name="type" value="post" />

                    <div class="form-group post-edit-fields">
                        <label>Title</label>
                        <input type="text" class="form-control" name="title" id="editTitle">
                    </div>

                    <div class="form-group">
                        <label>Content</label>
                        <textarea class="form-control" name="content" id="editContent" rows="5"></textarea>
                    </div>

                    <div class="form-group post-edit-fields">
                        <label>Type</label>
                        <select class="form-control" name="postType" id="editPostType" disabled>
                            <option value="@CommunityPost.Types.concern">Concern</option>
                            <option value="@CommunityPost.Types.suggestion">Suggestion</option>
                            <option value="@CommunityPost.Types.general">General</option>
                            <option value="@CommunityPost.Types.advice">Advice</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

@* Delete confirmation modal *@
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Toggle new thread form
           $("#new-thread-button, #empty-new-thread-button").click(function() {
                // Apply blur and scale effect to all post cards
                $(".post-card").addClass("blur slide-down");
                
                // Show the form with animation
                $("#new-thread-form")
                    .removeClass("d-none collapsed")
                    .addClass("expanded");
                
                // Hide the clicked button
                $(this).hide();
                
                // Scroll to the form if it was the empty state button
                if ($(this).is("#empty-new-thread-button")) {
                    $('html, body').animate({
                        scrollTop: $("#new-thread-form").offset().top - 20
                    }, 300);
                }
            });

            $("#cancel-thread").click(function() {
                // Remove effects from post cards
                $(".post-card").removeClass("blur slide-down");
                
                // Hide the form with animation
                $("#new-thread-form")
                    .removeClass("expanded")
                    .addClass("collapsed");
                
                // After animation completes, hide it completely
                setTimeout(() => {
                    $("#new-thread-form").addClass("d-none");
                }, 300);
                
                // Show both possible buttons
                $("#new-thread-button, #empty-new-thread-button").show();
            });

            // Handle post editing
            $('.edit-post-btn').click(function () {
                const postId = $(this).data('post-id');
                const title = $(this).data('original-title');
                const content = $(this).data('original-content');
                const type = $(this).data('original-type');

                $('#editId').val(postId);
                $('#editType').val('post');
                $('#editTitle').val(title);
                $('#editContent').val(content);
                $('#editPostType').val(type);
                $('.post-edit-fields').show();

                $('#editModal').modal('show');
            });

            // Handle comment editing
            $('.edit-comment-btn').click(function () {
                const commentId = $(this).data('comment-id');
                const content = $(this).data('original-content');

                $('#editId').val(commentId);
                $('#editType').val('comment');
                $('#editContent').val(content);
                $('.post-edit-fields').hide();

                $('#editModal').modal('show');
            });

            // Form submission
            $('#editForm').submit(function (e) {
                e.preventDefault();

                const formData = {
                    id: $('#editId').val(),
                    type: $('#editType').val(),
                    content: $('#editContent').val()
                };

                if (formData.type === 'post') {
                    formData.title = $('#editTitle').val();
                    formData.postType = $('#editPostType').val();
                }

                $.ajax({
                    url: window.location.pathname + '?handler=Edit',
                    type: 'POST',
                    data: formData,
                    headers: {
                        "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function () {
                        location.reload();
                    },
                    error: function () {
                        alert('Error updating content');
                    }
                });
            });

            // Delete functionality
            let itemToDelete = null;
            let deleteType = null;
            const deleteModal = new bootstrap.Modal(document.getElementById('deleteConfirmationModal'));

            // Handle post deletion
            $('.delete-post-btn').click(function () {
                itemToDelete = $(this).data('post-id');
                deleteType = 'post';
                deleteModal.show();
            });

            // Handle comment deletion
            $('.delete-comment-btn').click(function () {
                itemToDelete = $(this).data('comment-id');
                deleteType = 'comment';
                deleteModal.show();
            });

            // Confirm deletion
            $('#confirmDeleteBtn').click(function () {
                $.ajax({
                    url: window.location.pathname + '?handler=Delete',
                    type: 'POST',
                    data: {
                        id: itemToDelete,
                        type: deleteType,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function () {
                        deleteModal.hide();
                        location.reload();
                    },
                    error: function () {
                        alert('Error deleting item');
                    }
                });
            });

            // Voting functionality
            $(document).on('click', '.upvote-btn, .downvote-btn', function (e) {
                e.preventDefault();
                const postId = $(this).data('post-id');
                const isUpvote = $(this).hasClass('upvote-btn');
                const $button = $(this);
                const $oppositeButton = isUpvote ?
                    $(`.downvote-btn[data-post-id="${postId}"]`) :
                    $(`.upvote-btn[data-post-id="${postId}"]`);

                // If already active, this is an unvote
                const isActive = isUpvote ? 
                    $button.hasClass('text-primary') : 
                    $button.hasClass('text-secondary');
                const voteValue = isActive ? null : isUpvote;

                $.ajax({
                    url: window.location.pathname + '?handler=Vote',
                    type: 'POST',
                    data: {
                        postId: postId,
                        isUpvote: voteValue,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        // Update net votes
                        $(`.net-votes[data-post-id="${postId}"]`).text(response.upvotes - response.downvotes);

                        // Update active states and colors
                        if (voteValue === null) {
                            // Unvoting
                            $button.removeClass(isUpvote ? 'text-primary' : 'text-secondary');
                        } else {
                            // Voting
                            $button.addClass(isUpvote ? 'text-primary' : 'text-secondary');
                            $oppositeButton.removeClass(isUpvote ? 'text-secondary' : 'text-primary');
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error processing vote:', error);
                        alert('Error processing your vote');
                    }
                });
            });
        });

        // Read more functionality
        function toggleReadMore(postId) {
            const dotsElement = document.getElementById(`dots-${postId}`);
            const moreTextElement = document.getElementById(`more-${postId}`);
            const linkElement = document.querySelector(`a[onclick="toggleReadMore('${postId}')"]`);

            if (dotsElement.style.display === "none") {
                dotsElement.style.display = "inline";
                linkElement.innerHTML = "Read More";
                moreTextElement.style.display = "none";
            } else {
                dotsElement.style.display = "none";
                linkElement.innerHTML = "Read Less";
                moreTextElement.style.display = "inline";
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            // Select all vote buttons
            const voteButtons = document.querySelectorAll('.vote-btn');

            // Add click event listeners to each button
            voteButtons.forEach(button => {
                button.addEventListener('click', function () {
                    // If the same button is clicked again, toggle its active state
                    if (this.classList.contains('active')) {
                        this.classList.remove('active');
                    } else {
                        // If it's an upvote, remove active from downvote and vice versa
                        if (this.classList.contains('upvote')) {
                            document.querySelector('.downvote').classList.remove('active');
                        } else {
                            document.querySelector('.upvote').classList.remove('active');
                        }

                        // Add active class to the clicked button
                        this.classList.add('active');
                    }
                });
            });
        });
    </script>
}