// <auto-generated />
using System;
using HomeownersMS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HomeownersMS.Migrations
{
    [DbContext(typeof(HomeownersContext))]
    [Migration("20250413033919_PhoneText")]
    partial class PhoneText
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("HomeownersMS.Models.Admin", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FName")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("HireDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Job")
                        .HasColumnType("TEXT");

                    b.Property<string>("LName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("HomeownersMS.Models.Announcement", b =>
                {
                    b.Property<int>("AnnouncementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BlocksAffected")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly?>("EventDate")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly?>("EventTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Office")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("AnnouncementId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Announcement", (string)null);
                });

            modelBuilder.Entity("HomeownersMS.Models.CommunityComment", b =>
                {
                    b.Property<int>("CommunityCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CommunityPostId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CommunityCommentId");

                    b.HasIndex("CommunityPostId");

                    b.HasIndex("UserId");

                    b.ToTable("CommunityComment", (string)null);
                });

            modelBuilder.Entity("HomeownersMS.Models.CommunityPost", b =>
                {
                    b.Property<int>("CommunityPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Vote")
                        .HasColumnType("INTEGER");

                    b.HasKey("CommunityPostId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("CommunityPost", (string)null);
                });

            modelBuilder.Entity("HomeownersMS.Models.CommunityVote", b =>
                {
                    b.Property<int>("CommunityVoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CommunityPostId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsUpvote")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CommunityVoteId");

                    b.HasIndex("UserId");

                    b.HasIndex("CommunityPostId", "UserId")
                        .IsUnique();

                    b.ToTable("CommunityVote", (string)null);
                });

            modelBuilder.Entity("HomeownersMS.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdditionalServices")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly?>("EventDate")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly?>("EventTimeEnd")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly?>("EventTimeStart")
                        .HasColumnType("TEXT");

                    b.Property<int>("EventType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FacilityRequestId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GuestCapacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("EventId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FacilityRequestId");

                    b.ToTable("Event", (string)null);
                });

            modelBuilder.Entity("HomeownersMS.Models.Facility", b =>
                {
                    b.Property<int>("FacilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("FacilityImage")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<float?>("PricePerHour")
                        .HasColumnType("REAL");

                    b.HasKey("FacilityId");

                    b.ToTable("Facility", (string)null);
                });

            modelBuilder.Entity("HomeownersMS.Models.FacilityRequest", b =>
                {
                    b.Property<int>("FacilityRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("TEXT");

                    b.Property<int>("FacilityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ResidentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("FacilityRequestId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("ResidentId");

                    b.ToTable("FacilityRequest", (string)null);
                });

            modelBuilder.Entity("HomeownersMS.Models.FacilityReview", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FacilityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ResidentId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ResidentUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("TEXT");

                    b.HasKey("ReviewId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("ResidentId");

                    b.HasIndex("ResidentUserId")
                        .IsUnique();

                    b.ToTable("FacilityReview", (string)null);
                });

            modelBuilder.Entity("HomeownersMS.Models.Resident", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LName")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("MoveInDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Resident", (string)null);
                });

            modelBuilder.Entity("HomeownersMS.Models.Resource", b =>
                {
                    b.Property<int>("ResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("ResourceId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Resource", (string)null);
                });

            modelBuilder.Entity("HomeownersMS.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("StaffId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("ServiceId");

                    b.HasIndex("StaffId");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("HomeownersMS.Models.ServiceRequest", b =>
                {
                    b.Property<int>("ServiceRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RequestedBy")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("ServiceRequestId");

                    b.HasIndex("RequestedBy");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceRequest", (string)null);
                });

            modelBuilder.Entity("HomeownersMS.Models.Staff", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FName")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("HireDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Job")
                        .HasColumnType("TEXT");

                    b.Property<string>("LName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Staff", (string)null);
                });

            modelBuilder.Entity("HomeownersMS.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Privilege")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("HomeownersMS.Models.Admin", b =>
                {
                    b.HasOne("HomeownersMS.Models.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("HomeownersMS.Models.Admin", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HomeownersMS.Models.Announcement", b =>
                {
                    b.HasOne("HomeownersMS.Models.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("HomeownersMS.Models.CommunityComment", b =>
                {
                    b.HasOne("HomeownersMS.Models.CommunityPost", "CommunityPost")
                        .WithMany("Comments")
                        .HasForeignKey("CommunityPostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HomeownersMS.Models.User", "User")
                        .WithMany("CommunityComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CommunityPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HomeownersMS.Models.CommunityPost", b =>
                {
                    b.HasOne("HomeownersMS.Models.User", "User")
                        .WithMany("CommunityPosts")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("HomeownersMS.Models.CommunityVote", b =>
                {
                    b.HasOne("HomeownersMS.Models.CommunityPost", "Post")
                        .WithMany("Votes")
                        .HasForeignKey("CommunityPostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HomeownersMS.Models.User", "User")
                        .WithMany("CommunityVotes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HomeownersMS.Models.Event", b =>
                {
                    b.HasOne("HomeownersMS.Models.User", "User")
                        .WithMany("Events")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HomeownersMS.Models.FacilityRequest", "FacilityRequest")
                        .WithMany()
                        .HasForeignKey("FacilityRequestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("FacilityRequest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HomeownersMS.Models.FacilityRequest", b =>
                {
                    b.HasOne("HomeownersMS.Models.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("HomeownersMS.Models.Resident", "Resident")
                        .WithMany()
                        .HasForeignKey("ResidentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("Resident");
                });

            modelBuilder.Entity("HomeownersMS.Models.FacilityReview", b =>
                {
                    b.HasOne("HomeownersMS.Models.Facility", "Facility")
                        .WithMany("FacilityReviews")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HomeownersMS.Models.Resident", "Resident")
                        .WithMany()
                        .HasForeignKey("ResidentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HomeownersMS.Models.Resident", null)
                        .WithOne("FacilityReview")
                        .HasForeignKey("HomeownersMS.Models.FacilityReview", "ResidentUserId");

                    b.Navigation("Facility");

                    b.Navigation("Resident");
                });

            modelBuilder.Entity("HomeownersMS.Models.Resident", b =>
                {
                    b.HasOne("HomeownersMS.Models.User", "User")
                        .WithOne("Resident")
                        .HasForeignKey("HomeownersMS.Models.Resident", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HomeownersMS.Models.Resource", b =>
                {
                    b.HasOne("HomeownersMS.Models.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("HomeownersMS.Models.Service", b =>
                {
                    b.HasOne("HomeownersMS.Models.Staff", "Staff")
                        .WithMany("Services")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("HomeownersMS.Models.ServiceRequest", b =>
                {
                    b.HasOne("HomeownersMS.Models.Resident", "Resident")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("RequestedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HomeownersMS.Models.Service", "Service")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Resident");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("HomeownersMS.Models.Staff", b =>
                {
                    b.HasOne("HomeownersMS.Models.User", "User")
                        .WithOne("Staff")
                        .HasForeignKey("HomeownersMS.Models.Staff", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HomeownersMS.Models.CommunityPost", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("HomeownersMS.Models.Facility", b =>
                {
                    b.Navigation("FacilityReviews");
                });

            modelBuilder.Entity("HomeownersMS.Models.Resident", b =>
                {
                    b.Navigation("FacilityReview");

                    b.Navigation("ServiceRequests");
                });

            modelBuilder.Entity("HomeownersMS.Models.Service", b =>
                {
                    b.Navigation("ServiceRequests");
                });

            modelBuilder.Entity("HomeownersMS.Models.Staff", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("HomeownersMS.Models.User", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("CommunityComments");

                    b.Navigation("CommunityPosts");

                    b.Navigation("CommunityVotes");

                    b.Navigation("Events");

                    b.Navigation("Resident");

                    b.Navigation("Staff");
                });
#pragma warning restore 612, 618
        }
    }
}
